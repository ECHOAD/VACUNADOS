@page "/"
@page "/vacuanrpersona"
@inject IDataAccess _data
@inject IConfiguration _config
@using FluentValidation


<MudContainer>

    @if (!IdisVerified)
    {
        <MudItem>
            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
                <EditForm Model="CedulaFiltro" OnSubmit="()=>LoadObjects(CedulaFiltro)">
                    <DataAnnotationsValidator />
                    <MudCard>
                        <MudCardHeader>
                            <MudCardHeader>
                                <MudText Typo="Typo.h5">Verificar Cedula</MudText>
                            </MudCardHeader>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudGrid>
                                <MudItem sm="12">
                                    <MudTextField @bind-Value="CedulaFiltro" Label="Cedula" Variant="Variant.Text" Required="true" Validation="@ccValidator.Validation"></MudTextField>
                                </MudItem>
                                <MudItem sm="12">
                                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" FullWidth="true">Verificar</MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                </EditForm>
                <MudDivider DividerType="DividerType.Middle" Class="my-6" />
            </MudContainer>
        </MudItem>


    }




    @if (OPersonaVacuna != null)
    {

        <MudGrid>
            <MudCard>
                <MudCardHeader>
                    <MudCardHeader>
                        <MudText Typo="Typo.h5">Rellenar formulario</MudText>
                    </MudCardHeader>
                </MudCardHeader>
                <MudCardContent>
                    <MudForm @ref="form">
                        <EditForm Model="@OPersonaVacuna.Persona" OnValidSubmit="InsertData">
                            <DataAnnotationsValidator />
                            <MudItem>
                                <MudGrid>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="@OPersonaVacuna.Persona.Cedula" T="string" Label="Cedula" Required="true" RequiredError="La cedula es requerida!" Disabled="@ExistPersona" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="@OPersonaVacuna.Persona.Nombre" T="string" Label="Nombre" Required="true" RequiredError="El nombre es requerido!" Disabled="@ExistPersona" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="@OPersonaVacuna.Persona.Apellido" T="string" Label="Apellido" Required="true" RequiredError="El apellido es requerido!" Disabled="@ExistPersona" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudTextField @bind-Value="@OPersonaVacuna.Persona.Telefono" T="string" Label="Telefono" Required="true" RequiredError="El telefono requerido!" Disabled="@ExistPersona" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudDatePicker Label="Fecha de Nacimiento" Editable="true" @bind-Date="@OPersonaVacuna.Persona.Fecha_nacimiento" TitleDateFormat="dd-mm-yyyy" Disabled="@ExistPersona" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudSelect T="int" Label="Signo Zodiacal">
                                            @if (_cboSignoZod != null)
                                            {
                                                <MudSelectItem Value="0">Seleccione</MudSelectItem>

                                                @foreach (var p in _cboSignoZod)
                                                {
                                                    <MudSelectItem Value=" (int) p.Id">@p.Nombre</MudSelectItem>
                                                }
                                            }
                                            else
                                            {
                                                <MudSelectItem Value="0">--No hay Datos--</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudSelect T="int" @bind-Value="OPersonaVacuna.Vacuna_Id" Label="Vacunas">
                                            @if (_cboVacunas != null)
                                            {
                                                <MudSelectItem Value="0">Seleccione</MudSelectItem>

                                                @foreach (var p in _cboVacunas)
                                                {
                                                    <MudSelectItem T="int" Value="(int) p.Id">@p.Marca</MudSelectItem>
                                                }
                                            }
                                            else
                                            {
                                                <MudSelectItem Value="0">--No hay Datos--</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudSelect T="int" Label="Provincia">
                                            @if (_cboProvincia != null)
                                            {
                                                <MudSelectItem Value="0">Seleccione</MudSelectItem>

                                                @foreach (var p in _cboProvincia)
                                                {
                                                    <MudSelectItem Value=" (int) p.Id">@p.Nombre</MudSelectItem>
                                                }
                                            }
                                            else
                                            {
                                                <MudSelectItem Value="0">--No hay Datos--</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudDatePicker Label="Fecha de Vacunacion" Editable="true" @bind-Date="@OPersonaVacuna.Fecha" TitleDateFormat="dd-mm-yyyy" Disabled="@FechaActual" />
                                    </MudItem>
                                    <MudItem xs="12" sm="6" md="4">
                                        <MudCheckBox @bind-Checked="@FechaActual" @onchange=" eventArgs  => {SetFechaActual(eventArgs.Value);}">La vacuna es aplicada hoy?</MudCheckBox>
                                    </MudItem>
                                    <MudItem xs="6" sm="6" md="4">
                                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Info" FullWidth="true">Aplicar vacuna</MudButton>
                                    </MudItem>
                                    <MudItem xs="6" sm="6" md="4">
                                        <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Error" FullWidth="true" OnClick="()=> {OPersonaVacuna=null; IdisVerified=false; CedulaFiltro=string.Empty;}">Cancelar</MudButton>
                                    </MudItem>
                                </MudGrid>
                            </MudItem>
                        </EditForm>
                    </MudForm>
                </MudCardContent>
            </MudCard>
        </MudGrid>

    }

</MudContainer>








@code {
    private bool _hidePosition;
    private bool _loading;
    bool IdisVerified = false;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;
    public string CedulaFiltro { get; set; } = "";

    private static PersonaModel persona = new();
    private PersonaVacunaModel OPersonaVacuna;
    private static bool ExistPersona = false;
    private static bool FechaActual = true;
    List<dynamic> personavacunas;
    private List<ComboBoxProvinciaModel> _cboProvincia;
    private List<ComboBoxSignoZodModel> _cboSignoZod;
    private List<dynamic> _cboVacunas;


    int AnswerServer;

    private void SetFechaActual(object Validacion)
    {
        FechaActual = (bool)Validacion;

        OPersonaVacuna.Fecha = FechaActual == true ? DateTime.Now : null;
    }

    private async Task LoadObjects(string Cedula)
    {

        string query = $"SELECT dbo.ufcExistePersona (@Cedula)";

        int AnswerServer = await _data.LoadObject<int, dynamic>(query, new { Cedula = Cedula }, _config.GetConnectionString("default"));

        query = "SELECT * FROM VACUNA";
        _cboVacunas = await _data.LoadData<dynamic, dynamic>(query, new { }, _config.GetConnectionString("default"));

        query = "SELECT Id, Nombre FROM PROVINCIA";

        _cboProvincia = await _data.LoadData<ComboBoxProvinciaModel, dynamic>(query, new { }, _config.GetConnectionString("default"));

        query = "SELECT ID, Nombre FROM SIGNO";

        _cboSignoZod = await _data.LoadData<ComboBoxSignoZodModel, dynamic>(query, new { }, _config.GetConnectionString("default"));

        ExistPersona = true;

        if (AnswerServer == 1)
        {
            query = "SELECT  TOP 1 * FROM Persona WHERE Cedula = @Cedula ";

            persona = await _data.LoadObject<PersonaModel, dynamic>(query, new { Cedula = Cedula }, _config.GetConnectionString("default"));


            OPersonaVacuna = new(persona);


        }
        else
        {

            persona = new();
            OPersonaVacuna = new(persona);

            OPersonaVacuna.Persona.Cedula = Cedula;

            ExistPersona = false;



        }

        IdisVerified = true;
    }

    private async Task InsertData()
    {
        string query;

        if (!ExistPersona)
        {

            query = "SP_AGREGAR_PERSONA @Cedula, @Nombre, @Apellido, @Telefono, @Fecha_Nacimiento,@Signo_Id";
            AnswerServer = await _data.SaveData<dynamic>(query, OPersonaVacuna.Persona, _config.GetConnectionString("default"));


            query = "SP_AGREGAR_PERSONAVACUNA @Cedula,  @Vacuna_Id , @Provincia_Id, @Fecha";

            AnswerServer = await _data.SaveData<dynamic>(query, new { Cedula = OPersonaVacuna.Persona.Cedula, Vacuna_Id = OPersonaVacuna.Vacuna_Id, Provincia_Id = OPersonaVacuna.Provincia_Id, Fecha = OPersonaVacuna.Fecha }, _config.GetConnectionString("default"));

        }
        else
        {
            query = "SP_AGREGAR_PERSONAVACUNA @Cedula,  @Vacuna_Id , @Provincia_Id, @Fecha";

            AnswerServer = await _data.SaveData<dynamic>(query, new { Cedula = OPersonaVacuna.Persona.Cedula, Vacuna_Id = OPersonaVacuna.Vacuna_Id, Provincia_Id = OPersonaVacuna.Provincia_Id, Fecha = OPersonaVacuna.Fecha }, _config.GetConnectionString("default"));
        }

        OPersonaVacuna = null;
        await OnInitializedAsync();

    }

    private async Task UpdateData()
    {
        string query = "UPDATE PERSONAVACUNA SET Nombre=@Nombre,Apellido=@Apellido,Telefono=@Telefono," +
        "FechaNacimiento=@FechaNacimiento,ProvinciaId=@ProvinciaId,SIGNOZODID=@SignoZodid, " +
        "MarcaId=@MarcaId, DosisId=@DosisIdWhere Cedula= @Cedula";
        AnswerServer = await _data.SaveData<PersonaVacunaModel>(query, OPersonaVacuna, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    private async Task DeleteData(dynamic Persona)
    {
        string query = "DELETE PERSONAVACUNA Cedula= @Cedula";
        AnswerServer = await _data.SaveData(query, new { Cedula = Persona.CEDULA }, _config.GetConnectionString("default"));
        await OnInitializedAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        string query = "SELECT * from uvwPersonaVacuna";
        personavacunas = await _data.LoadData<dynamic, dynamic>(query, new { }, _config.GetConnectionString("default"));


    }



    // The validation rules (overkill, I know, but very fluent):
    FluentValueValidator<string> ccValidator = new FluentValueValidator<string>(x => x
        .NotEmpty()
        .Length(1, 11)
        .CreditCard());

    public class FluentValueValidator<T> : AbstractValidator<T>
    {
        public FluentValueValidator(Action<IRuleBuilderInitial<T, T>> rule)
        {
            rule(RuleFor(x => x));
        }

        private IEnumerable<string> ValidateValue(T arg)
        {
            var result = Validate(arg);
            if (result.IsValid)
                return new string[0];
            return result.Errors.Select(e => e.ErrorMessage);
        }

        public Func<T, IEnumerable<string>> Validation => ValidateValue;
    }
}

